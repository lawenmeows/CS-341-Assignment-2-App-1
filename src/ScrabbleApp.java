import javax.swing.*;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class ScrabbleApp {

    // Variables for GUI components generated by WindowBuilder
    private JFrame frame;
    private JTextField inputField;
    private JTextArea resultArea;  // Change result label to a JTextArea
    private JScrollPane scrollPane;  // Add a scroll pane

    /**
     * Launch the application.
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    ScrabbleApp window = new ScrabbleApp();
                    window.frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the application.
     */
    public ScrabbleApp() {
        initialize();
    }

    /**
     * Initialize the contents of the frame (generated by WindowBuilder).
     */
    private void initialize() {
        frame = new JFrame("Scrabble Tile Arranger");
        frame.setBounds(100, 100, 450, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        // Label for input instruction
        JLabel lblEnterTiles = new JLabel("Enter up to 7 Scrabble tiles:");
        lblEnterTiles.setBounds(10, 11, 200, 14);
        frame.getContentPane().add(lblEnterTiles);

        // Input text field
        inputField = new JTextField();
        inputField.setBounds(10, 36, 160, 20);
        frame.getContentPane().add(inputField);
        inputField.setColumns(10);

        // Generate button
        JButton btnGenerate = new JButton("Generate");
        btnGenerate.setBounds(180, 35, 100, 23);
        frame.getContentPane().add(btnGenerate);

        // Text area to display results
        resultArea = new JTextArea();
        resultArea.setEditable(false);  // Set text area as read-only

        // Scroll pane for result area
        scrollPane = new JScrollPane(resultArea);
        scrollPane.setBounds(10, 70, 400, 150);  // Size for the scroll pane
        frame.getContentPane().add(scrollPane);

        // Action listener for the "Generate" button
        btnGenerate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String input = inputField.getText();
                if (!isValidInput(input)) {
                    resultArea.setText("Error: Input must be letters and <= 7 characters.");
                } else {
                    // If input is valid, generate arrangements
                    ArrayList<String> arrangements = generateArrangements(input);
                    resultArea.setText(String.join("\n", arrangements));  // Display in JTextArea
                }
            }
        });
    }

    // Validates the input to ensure it contains only letters and is <= 7 characters
     
    private boolean isValidInput(String input) {
        if (input.length() > 7) {
            return false;  // Check if input exceeds 7 characters
        }
        for (char c : input.toCharArray()) {
            if (!Character.isLetter(c)) {
                return false;  // Check if all characters are letters
            }
        }
        return true;
    }

    // Generates all possible arrangements (permutations) of the input string
     
    private ArrayList<String> generateArrangements(String input) {
        ArrayList<String> result = new ArrayList<>();
        permute("", input, result);
        return result;
    }

    // Recursive method to find permutations of a string
     
    private void permute(String prefix, String remaining, ArrayList<String> result) {
        if (remaining.length() == 0) {
            result.add(prefix);  // Base case: all letters have been used
        } else {
            for (int i = 0; i < remaining.length(); i++) {
                // Recursive case: add each letter and permute the rest
                permute(prefix + remaining.charAt(i), 
                        remaining.substring(0, i) + remaining.substring(i + 1), result);
            }
        }
    }
}
